{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","setTimeout","then","useFetchGifs","GifExpertApp","categories","cate","ReactDOM","render","document","getElementById"],"mappings":"qLAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAErB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACC,sBAAMC,SARc,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAIf,SACC,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAfuB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCMZG,EAZK,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAI9B,OACC,sBAAKC,UAAU,6CAAf,UACG,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPIK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBN,EADgB,iDACgCO,UACpDF,GAFoB,+DAKJG,MAAMR,GALF,cAKhBS,EALgB,gBAMCA,EAAIC,OANL,uBAMdC,EANc,EAMdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAXf,kBAefY,GAfe,4CAAH,sDCmBLK,EAlBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEjB,ECA0B,SAACA,GAC5B,MAA0BrB,mBAAS,CACjC2B,KAAK,GACLO,SAAQ,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAZCC,qBAAU,WAERC,YAAW,WAEVlB,EAAQC,GAAUkB,MAAK,SAAAT,GAAG,OAAGM,EAAS,CACrCT,KAAKG,EACLI,SAAQ,SAGR,OAED,CAACb,IACEc,EDjBiBK,CAAanB,GAA7BM,EAAP,EAAOA,KAAKO,EAAZ,EAAYA,QAEZ,OACE,qCACE,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAW,2CACZ,qBAAKjB,UAAU,YAAf,SACGU,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEUjB2B,EAnBM,WAEpB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAGA,OACA,eAAC,WAAD,WACC,gDACE,cAAC,EAAD,CAAaA,cAAeA,IAC9B,uBACA,6BACE2C,EAAWb,KAAI,SAAAc,GAAI,OACjB,cAAC,EAAD,CAAoBtB,SAAUsB,GAAhBA,Y,MCVpBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.11c2e03e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n const [inputValue, setInputValue] = useState(\"\");\r\n\r\n const handleInputChange = (e)=>{\r\n    setInputValue(e.target.value)\r\n }\r\n const handleSubmit = (e)=>{\r\n   e.preventDefault();\r\n   if(inputValue.trim().length > 2){\r\n   setCategories(cat=>[inputValue,...cat])\r\n   setInputValue(\"\");}\r\n  }\r\n\r\n return (\r\n  <form onSubmit={handleSubmit}>\r\n   <input \r\n    type=\"text\" \r\n    value={inputValue}\r\n    onChange={handleInputChange}\r\n   />\r\n  </form>\r\n )\r\n}\r\n\r\nAddCategory.propTypes={\r\n setCategories:PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddCategory\r\n\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n \r\n \r\n \r\n return (\r\n  <div className=\"card animate__animated animate__fadeInDown\">\r\n     <img src={url} alt={title} />\r\n     <p>{title}</p>\r\n  </div>\r\n )\r\n}\r\n\r\nexport default GifGridItem\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n   category\r\n )}&limit=10&api_key=30m992D2PaujZKsZ8kvhShSg7OJOarZC`;\r\n\r\n const res = await fetch(url);\r\n const { data } = await res.json();\r\n const gifs = data.map((img) => {\r\n   return {\r\n     id: img.id,\r\n     title: img.title,\r\n     url: img.images.downsized_medium.url,\r\n   };\r\n });\r\n // console.log(gifs);\r\n return gifs;\r\n};","import GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  \r\n  const {data,loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"animate__animated animate__shakeY\">{category}</h2>\r\n      {loading && <p>loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n const [state, setState] = useState({\r\n   data:[],\r\n   loading:true\r\n });\r\n  useEffect(() => {\r\n    \r\n    setTimeout(()=>{\r\n\r\n     getGifs(category).then(img =>setState({\r\n      data:img,\r\n      loading:false,\r\n     }))\r\n\r\n    },3000)\r\n   \r\n  }, [category])\r\n return state\r\n\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n const [categories, setCategories] = useState([\"one punch man\"]);\r\n \r\n\r\n return ( \r\n <Fragment>\r\n  <h2>Gif Expert App</h2>\r\n    <AddCategory setCategories={setCategories} />\r\n  <hr />\r\n  <ol>\r\n   {categories.map(cate => (\r\n      <GifGrid key={cate} category={cate} />\r\n   ))}\r\n  </ol>\r\n </Fragment> \r\n );\r\n};\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}